/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Jacoco for test reports
    id 'jacoco'
}

// Use java version 8 (aka 1.8)
compileJava { 
    sourceCompatibility = '1.8' 
    targetCompatibility = '1.8' 
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:27.1-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'

    // cactoos
    compile group: 'org.cactoos', name: 'cactoos', version: '0.29'

    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

application {
    // Define the main class for the application
    println System.getProperty("exec.mainClass")
    mainClassName = System.getProperty("exec.mainClass") ?: "blockchain.BlockchainServer"
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

test.finalizedBy jacocoTestReport

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/testCoverageReports")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacocoHTML")
    }
}

task archive(type: Zip) {
    dependsOn 'deletePackageLines'
    from 'src/main/java/blockchain'
    include "*.java"
    include "*.pdf"
    archiveName = "src.zip"
    into("src/")
    destinationDir = file('build/archive')
    doFirst {
        println "Archving code ..."
    }
    finalizedBy 'restorePackageLines'
}

task deletePackageLines {
    doLast {
        description "This function will remove all package lines from all src files"
        FileTree  propFiles = fileTree('src/main/java/blockchain/') {
            exclude "*.pdf"
        }
        String regex = "package.*"
        propFiles.each { File propFile ->
            print "Start replacing package lines in $propFile.name ... "
            String content = propFile.getText()
            content = content.replaceAll(regex, "")
            content.trim()
            propFile.setText(content)
            println "Done"
        }
    }
}

task restorePackageLines {
    doLast {
        description "This function will restore all package lines from all src files"
        FileTree  propFiles = fileTree('src/main/java/blockchain') {
            exclude "*.pdf"
        }
        String regex = "package.*"
        propFiles.each { File propFile ->
            print "Start restoring package lines in $propFile.name ... "
            String content = propFile.getText()
            content = content.trim()
            content = "package blockchain;\n\n\n" + content
            propFile.setText(content)
            println "Done"
        }
    }
}

run {
    standardInput = System.in
}

sourceSets {
    main {
        output.resourcesDir = "build/classes/java/main/blockchain"
    }
    test {
        output.resourcesDir = "build/classes/java/test/blockchain"
    }
}